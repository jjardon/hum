Goals for 1.0

USABILITY

Before I (or anybody, for that matter) will be happy releasing Hum for public
consumption, the following goals must be met:

	* Startup must be shorter than 3 seconds, regardless of the size of a user's
	  library. Arbitrary? Yes. But that's just how I roll.
	
	* The interface must be minimal and responsive at all times. Inattentive apps,
	  like inattentive people, are themselves frequently ignored. Think about it. 
	  It's deep.
	
	* All metadata displayed to the user must be accurate. No quoted escaped 
	  quotes. No missing metadata that's not really missing, no songs that are
	  0:00 in duration. That's amateur. Not cool. Pathetic.
	
	* All metadata displayed to the user must be localized and internationalized.
	  Klapa Subrenum's "Dubrovniče Stari Grade" had better show up correctly or
	  my wife will kill me. I don't even want to think about what she will do to 
	  me if "Puste Noći Dok Sam Ček'o Pavu" or "U Đardinu" are screwed up...
	
	* Any search results, playlists, browsers or whatever must show only tracks 
	  accessible to the user. In other words, no songs from unmounted volumes are
	  allowed. Cuz that's just annoying.
	
	* Any search results, playlists, browsers or whatever must show only valid
	  audio tracks to the user. Color me biased, but I will not tolerate playlists
	  or random files showing up in my search results.
	
	* Users must be able to construct and save playlists. Jamie McCracken and
	  other brainiacs will have to help me come up with the most extensible and
	  open way to do this (ideally using tags or something). They will do this
	  because I command them to.

	* Adding tracks to playlists should be crazy simple, or else the app is
	  hopelessly broken and in great need of fixing.
	
	* Users must be able to toggle whether they would like the currently selected
	  playlist to repeat or shuffle. I can't be expected to sit by the computer
	  and double click every time Britney Spears' "Toxic" finishes.
	
	* Users must be able to specify the volume for the application. By default,
	  though, the volume knob should be set to 11.

DESIGN

In order to meet these goals, and to make Hum fun and easy to hack on later,
some design considerations should be met:

	* Wherever possible, obviously compartmentalized code should be separated into
	  another, well-documented file. If the code is well-structured and easy to
	  read, it's doubly hackable and more amenable to bug fixing.

	* If another service or application or code base does something close to what
	  Hum wants, it will be used in lieu of reinventing the wheel for a silly
	  little music app.

	* The front end and back end should be fully decoupled, with the back end
	  being a DBus service that has a few simple, playback-specific capabilities.
	  The simpler and more focused the back end is, the more robust we can make
	  it.

To this end, the player will export the following verbs over a public DBus
interface:

	ORDER
	-----
	x add_track(uri, [pos])  - add the track represented by URI to the playlist,
	                           optionally at *pos* in the list
	x remove_track(pos)      - delete the track at *pos* in the list
	x clear_playlist()       - remove all contents of the playlist


	PLAYBACK
	--------
	x play([pos])       - start playback of the items in the playlist, in order,
	                      optionally starting at *pos* in the list (if playback is
			      paused and *pos* is not specified, resume playback)
	x pause()           - pauses playback
	x stop()            - halts playback, resetting the list pointer
	x next()            - move the list pointer to the next track in the list,
	                      playing the next track if the current track is playing
	x previous()            - move the list pointer to the previous track in the list,
	                      playing the previous track if the current track is
			      playing
	x seek(usec)        - seek to *usec* in the track
	* set_volume(value) - adjusts playback volume


	SETTINGS
	--------
	x set_repeat(bool)    - toggles playlist repeat
	~ set_shuffle(bool)   - toggles playlist shuffle
	* set_crossfade(bool) - toggles playlist crossfading


	OPERATION
	---------
	x quit()            - shut down the back end (usually on front end shutdown)

The back end will also have an introspection interface that will export the
following verbs to provide a means for front ends to accurately reflect the
current state:

	ORDER
	-----
	x get_playlist()    - returns the URIs, in order, in the current playlist
	

	PLAYBACK
	--------
	x get_status()      - returns one of "playing", "paused", or "ready",
	                      corresponding to GStreamer element states
	x get_track()       - returns the position of the list pointer
	x get_progress()    - returns the position of playback in a given track (if
	                      relevant)
	* get_volume()      - returns playback volume setting


	SETTINGS
	--------
	x get_repeat()      - returns playlist repeat setting
	x get_shuffle()     - returns playlist shuffle setting
	* get_crossfade()   - returns playlist crossfading setting

And, in addition, it should emit signals to announce changes in state,
including:

	ORDER
	-----
	x track_added(uri, pos)   - signals that the track *uri* has been added to the
	                            playlist at *pos*
	x track_removed(pos)      - signals that the track at *pos* has been removed
	                            from the playlist
	x playlist_cleared        - signals that the playlist has been cleared

	PLAYBACK
	--------
	x playing_track(pos)      - signals that the track at *pos* has begun playing
	x paused_playback         - signals that playback has been paused
	x stopped_playback        - signals that playback has been stopped
	x seeked(usec)            - signals that the track has been seeked to *usec*
	* volume_changed(level)   - signals that the volume has been changed to
	                            *level*

	SETTINGS
	--------
	x repeat_toggled(bool)    - signals that the repeat setting has been changed
	                            to *bool*
	x shuffle_toggled(bool)   - signals that the shuffle setting has been changed
	                            to *bool*
	* crossfade_toggled(bool) - signals that the crossfade setting has been
	                            changed to *bool*
